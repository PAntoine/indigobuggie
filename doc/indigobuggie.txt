*indigobuggie.txt*  For Vim version 8.1

.   _____           _ _                ______                    _          ~
.  (_____)         | (_)              (____  \                  (_)         ~
.     _   ____   _ | |_  ____  ___     ____)  )_   _  ____  ____ _  ____    ~
.    | | |  _ \ / || | |/ _  |/ _ \   |  __  (| | | |/ _  |/ _  | |/ _  )   ~
.   _| |_| | | ( (_| | ( ( | | |_| |  | |__)  ) |_| ( ( | ( ( | | ( (/ /    ~
.  (_____)_| |_|\____|_|\_|| |\___/   |______/ \____|\_|| |\_|| |_|\____)   ~
.                      (_____|                      (_____(_____|           ~
'                                                                           ~
Author:   Peter Antoine
Date:     April 3nd, 2019
Version:  1.0.4

HomePage: *tbd*

A plugin framework for editors.

For instructions on installing this file, type:
>
    :help add-local-help |add-local-help| inside Vim.
<

------------------------------------------------------------------------------
1. Contents                             *indigobuggie* *indigobuggie-contents*

    1. Contents...............................: |indigobuggie-contents|
    2. Description............................: |indigobuggie-description|
    3. Usage..................................: |indigobuggie-usage|
    4. Features...............................: |indigobuggie-features|
    5. Configuring indigobuggie...............: |indigobuggie-config|
    6. Configuring Features...................: |indigobuggie-features|
    7. History................................: |indigobuggie-history|

------------------------------------------------------------------------------
2. Description                                   *indigobuggie-description*

For details on the changes between versions see |indigobuggie-history|.

Indigo-Buggie (the name is a family in-joke that is not worth explaining) is
a plugin framework for editors. It is designed to take away the boring code
that will make creating plugin easier. It is designed to be cross-platform
(we will see how that goes) and extendable.

The plugins are loaded as features and each feature can be configured and
enabled/disabled individually. It should also be possible to install other
features when required.

Indigo-Buggie is built on the Beorn libraries (yup another family in-joke).
The library is released separately and each version of Indigo Buggie will
be built against a specific version of beorn_lib.

------------------------------------------------------------------------------
3. Usage                                         *indigobuggie-usage*

Indigo Buggie is a project oriented framework (<- Ahhh I hate this, can't
think of a better description).

The idea is to be able to work in a simple text editor and have some of the
features that bigger IDEs have, without the visual noise and complexity that
comes with that. So to keep things simple Indigo Buggie(IB) has a simple
visual structure.

Each instance (project) lives in a single tab. When the IB menu/UI is active
the main tab window is divided in to two main sections. The IB menu will
appear in a side window and the rest of the tab window will be left alone.

If a feature wants to create a new window it will create it in the tab, but if
you swap features all windows that have been opened by the feature will close.
With the exception of windows to regular files.

This keeps the states of the features consistent.

3.1. Opening Indigo Buggie.                             *opening-ib*

There are two ways of opening IB:

3.1.1 IB_OpenTab()

This is simplest way. It will open IB in the current directory.

If the configuration does not specify a root directory for IB, this directory
will be the root. If the current directory does not have a ".indigobuggie"
directory in it will create one. This is the configuration directory and it
will assume this is the root of the tree and the project. It will assume that
this is also the root of any code/data repositories that are in use.
[Note: This will change in later versions]

If the configuration does specify another root, then that will be used.

3.1.2. IB_OpenProject()

This option is not implemented yet, please wait.

3.2. Controlling IB                                 *basic-ib-control*

Each feature has it's own set of controls and these are defined by the feature
but there is a commonality in the framework (hopefully! as feature can call
any vim function they like) that is set my the way that the commands and menu
controls are created.

The system comes with the help command that can be turned on by calling the
|IB_ToggleHelp| function that will add a help menu that is feature sensitive
at the top of the screen.

The feature are selected by using the command sequence <c-i><c-?> where the
'?' is replaced by the first char of the selectable feature name. This will
then select the feature. This can only be called within an IB menu. You may
need to call |IB_OpenTab|, |IB_OpenProject| or |IB_ReOpen| to get the menu
window.

The menu window will always open to last window opened, if it had previously
been open in the current vim session, else it will open to the default feature
which will be the first selectable feature that is the enabled feature list.

To close IB call |IB_CloseWindow| and all the IB specific windows will close
and IB will go to the background. This will not stop and background activity.

3.3. Closing and Saving Data                            *ib-close-down*

IB does not save its state until the browser stops.

Note: TODO: This is bad, fix this before beta.

------------------------------------------------------------------------------
5. Features                                       *indigobuggie-features*

The features that are supported as of this version are:

    Source Tree |source_tree.txt|  The basic source tree viewer.
    SCM         |scm.txt|          The SCM interface.
    My Task     |my_task.txt|      The Task Manager.
    notes       |notes.txt|        The Notes Manager.
    Time Keeper |timekeeper.txt|   A time tracking feature. 
    Code Review |codereview.txt|   The CodeReview Manager.  

The features can be enabled or disabled via the |g:IB_enabled_features|
variable.

They are two different types of feature, those that can be selected and those
that run in the background. For example the SCM feature provides access to the
various SCMs that are supported, and this runs in the background. With the SCM
feature it is used by others (CodeReview and SourceTree for example) to provide
a service. It can be disabled and the other features should still work.

Features that need to save data will save it in the given directory and they
will save the data within a feature directory. The data should be stored in a
file that is named to the machine and user. Why? This is to avoid merge issues
if the files are committed to an SCM.

Only one feature can be selected at one time. That means that the features menu
will be brought into a side window when in the foreground. Indigo Buggie only
allows for one side window per tab. This is simply to make the coding easier and
I find multipane UIs confusing.


------------------------------------------------------------------------------
4. Configuring indigobuggie                      *indigobuggie-config*

g:IB_enabled_features                            *g:IB_enabled_features*
    This variable holds the names of the features that are to be enabled. As
    indigo buggie is a framework for developer tools that may not work for
    you workflow this allows you to remove the features that are not used by
    you.

    But this makes the search useful. [1]

g:IB_set_tab_line                                *g:IB_set_tab_line*
    This variable tell Indigo Buggie if it should update the tab line to
    show the IB tabs. [1]

g:IB_tab_name_function                           *g:IB_tab_name_function*
    Set this configuration option to the function you use to set the tabpage
    names. This will allow for custom tab page setters to be used. It will
    only be used for non-IB tabs. [IB_TabName]

------------------------------------------------------------------------------
6. Configuring features                          *indigobuggie-features*

Each feature has its own configuration. These are detailed on the help pages
for each of the specific features.

The format of the configuration items is a simple dictionary of the
configuration parameters. For example the SourceTree takes a root directory
for one of its parameters. So the following would be a valid configuration.

    [SourceTreeFeature, {'root_directory': '/home/awesome_user/project'}]


------------------------------------------------------------------------------
7. History                                       *indigobuggie-history*

    release_1.0.4   PA  Bux Fixes:
        Bug:         Tidy up some other issues.
        Bug:         CWD not always set as SCM if it is.
        Enhancement: Allow for history item to be open a file item.
        Enhancement: Add function search for SCM by path.
        Enhancement: Remove some incorrect code.
    release_1.0.3   PA  Bux Fixes:
        Bug:         Fix the SCM lookup for the items.
        Bug:         Item should lookup the SCM in it's own tree.
        Bug:         Handle SCM sub-repos correctly.
    release_1.0.2   PA  Bug Fixes:
        Enhancement: Tidy up SourceTreeFeature code.
        Enhancement: Added the diff against HEAD in source tree feature.
        Bug:         Crash when SCM updates.
        Bug:         Crash in `scm_feature`.
        Bug:         Fix mouse click line number.
        Bug:         Fixed one of the crashes in SCM
    release_1.0.1   PA  Bug Fixes:
        Enhancement: Tidy up the syntax files.
        Enhancement: Show submodule type names in lowercase
        Bug:         Don't crash if window has been closed.
        Bug:         Notes should reuse the file as the file name does not change.
        Bug:         Always good to push all the fixes.
    release_1.0.0   PA  The initial alpha release.

vim: ts=4 ft=help tw=78 expandtab:ft=help
